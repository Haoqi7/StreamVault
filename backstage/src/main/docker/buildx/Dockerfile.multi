# ===== 构建阶段 =====
FROM alpine:latest AS builder

ENV TZ=Asia/Shanghai \
    BUILD_VERSION=2025.05.06.042010 \
    YT_DLP_VERSION=2025.05.06.042010 \
    VENV_PATH=/opt/venv

# 使用中科大源，加快安装速度
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories && \
    apk update && apk upgrade

# 安装构建依赖（含 Python 相关）
RUN apk add --no-cache \
    python3 \
    py3-pip \
    py3-virtualenv \
    build-base \
    python3-dev \
    libffi-dev \
    tzdata \
    wget \
    ffmpeg

# 设置时区
RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    echo "Asia/Shanghai" > /etc/timezone

# 创建虚拟环境，安装 f2
RUN python3 -m venv ${VENV_PATH} && \
    . ${VENV_PATH}/bin/activate && \
    pip install --no-cache-dir f2

# 下载 yt-dlp（Python 依赖，单独下载二进制）
RUN wget -O /usr/local/bin/yt-dlp https://github.com/lemon8866/yt-dlp/releases/download/${YT_DLP_VERSION}/yt-dlp && \
    chmod +x /usr/local/bin/yt-dlp


# ===== 运行阶段 =====
FROM alpine:latest

ENV TZ=Asia/Shanghai \
    VENV_PATH=/opt/venv \
    YT_DLP_PATH=/usr/local/bin/yt-dlp

# 使用中科大源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories && \
    apk update && apk upgrade

# 安装最小运行依赖（Java、Python runtime、ffmpeg）
RUN apk add --no-cache \
    openjdk8 \
    python3 \
    ffmpeg \
    tzdata

# 设置时区
RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    echo "Asia/Shanghai" > /etc/timezone

# 复制构建好的虚拟环境和 yt-dlp 可执行文件
COPY --from=builder /opt/venv ${VENV_PATH}
COPY --from=builder /usr/local/bin/yt-dlp ${YT_DLP_PATH}

# 挂载点
VOLUME ["/tmp", "/app"]

# 复制应用文件
COPY db /home/app/db/
COPY script /home/app/script/
RUN mkdir -p /app/resources
ADD spirit-0.0.1-SNAPSHOT.jar /app.jar

# 设置 ENTRYPOINT
ENTRYPOINT ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app.jar", "--spring.profiles.active=docker"]
